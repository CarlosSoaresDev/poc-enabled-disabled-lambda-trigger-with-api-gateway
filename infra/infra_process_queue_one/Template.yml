AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  S3ArtefactBucketName:
    Type: String
    Default: s3-artefact-bucket
  SQSQueueName:
    Type: String
    Default: scheduler-queue
  EventBridgeScheduleBySecondsName:
    Type: String
    Default: schedule-by-seconds
  LambdaTransactionProcessorFunctionName:
    Type: String

Resources:
 
  SchedulerSecondsQueue:
    Type: AWS::SQS::Queue
    Properties:
     QueueName: !Ref SQSQueueName
     RedrivePolicy:
       deadLetterTargetArn: !GetAtt SchedulerSecondsQueueDQL.Arn
       maxReceiveCount: 3
  
  SchedulerSecondsQueueDQL:
    Type: AWS::SQS::Queue
    Properties:
     QueueName: !Sub '${SQSQueueName}-dql'
  
  EventBridgeSchedulerBySeconds:
    Type: AWS::Scheduler::Schedule
    Properties: 
      Description: "Execute Schedule Seconds by Seconds"
      FlexibleTimeWindow: 
        Mode : "OFF"
      GroupName: "default"
      Name: !Ref EventBridgeScheduleBySecondsName
      ScheduleExpression: "rate(5 Seconds)"
      ScheduleExpressionTimezone: "America/Sao_Paulo"
      Target: 
        Arn: !GetAtt SchedulerSecondsQueue.Arn
        RoleArn: !GetAtt EventBridgeScheduleRole.Arn
        Input: '{"StartSession": true }'
  
  EventBridgeScheduleRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action:
              - 'sts:AssumeRole'              
      Policies:
        - PolicyName: EventSchedulePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "sqs:SendMessage"
                Resource: !GetAtt SchedulerSecondsQueue.Arn
  
  LambdaTransactionProcessorFunctionLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      CompatibleRuntimes:
       - python3.10
      Content:
        S3Bucket: !Ref S3ArtefactBucketName
        S3Key: !Sub "${LambdaTransactionProcessorFunctionName}-layer.zip"
      LayerName: !Sub "${LambdaTransactionProcessorFunctionName}-layer"

  LambdaTransactionProcessorFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref LambdaTransactionProcessorFunctionName
      Handler: 'lambda_function.lambda_handler'
      Timeout: 15
      MemorySize: 128
      Runtime: python3.10
      Role: !GetAtt LambdaTransactionProcessorFunctionRole.Arn
      Code:
        S3Bucket: !Ref S3ArtefactBucketName
        S3Key: !Sub '${LambdaTransactionProcessorFunctionName}.zip'
      Layers: 
        - !Ref LambdaTransactionProcessorFunctionLayer 

  LambdaTransactionProcessorFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'              
      Policies:
        - PolicyName: LambdaTransactionsProcessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "logs:*"
                Resource: "*"              
              - Effect: Allow
                Action: 
                 - "s3:*"
                 - "s3-object-lambda:*"
                Resource: "*"
              - Effect: Allow
                Action: "sqs:*"
                Resource: "*"
              
  LambdaFunctionEventSourceMapping:
   Type: AWS::Lambda::EventSourceMapping
   Properties:
     BatchSize: 10
     Enabled: true
     EventSourceArn: !GetAtt SchedulerSecondsQueue.Arn
     FunctionName: !GetAtt LambdaTransactionProcessorFunction.Arn
