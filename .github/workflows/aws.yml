name: Infra poc enabled and disabled lambda trigger

env:
  ### service one
  service-name-app-process-one: app-process-queue-one  
  working-directory-app-process-one-build: ./services/app_process_queue_one
  working-directory-app-process-one-publish: ./infra/infra_process_queue_one
  ### service two
  service-name-app-process-two: app-process-queue-two
  working-directory-app-process-two-build: ./services/app_process_queue_two
  working-directory-app-process-two-publish: ./infra/infra_process_queue_two
  ### service three
  service-name-app-enabled-disabled-trigger: app-enabled-disabled-trigger
  working-directory-app-enabled-disabled-trigger-build: ./services/app_enabled_disabled_trigger
  working-directory-app-enabled-disabled-trigger-publish: ./infra/app_enabled_disabled_trigger

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [main]

jobs:
  pre-build:
    name: Pre-Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@master 
    - name: Setup python     
      uses: actions/setup-python@v4
      with:
       python-version: '3.10'

  build:
    name: Build       
    runs-on: ubuntu-latest
    needs: pre-build
    steps:  
     - name: Checkout
       uses: actions/checkout@master 
     - name: root directory
       run: ls -R
       working-directory: ${{env.worker-directory-root}}           
     - name: Configure AWS credentials
       id: credentialsaws
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ secrets.AWS_REGION }}
     - name: Generate and Publish layer artefact [ app-process-queue-one ]
       run: |
          echo " ########## Start generate layer packges ##########"
          mkdir -p layer/python/lib/python3.10/site-packages
          pip3 install -r requirements.txt -t layer/python/lib/python3.10/site-packages/
          cd layer
          ls -R
          echo " ########## Start Zip layer ##########"
          zip -r ${{env.service-name-app-process-one}}-layer.zip *
          aws s3 cp ./${{env.service-name-app-process-one}}-layer.zip s3://s3-artefact-bucket
          echo " ########## End Zip layer ##########"
          cd ..
          rm -r layer
          echo " ########## End generate layer packges ##########"
       working-directory: ${{env.working-directory-app-process-one-build}}  
     - name: Generate and Publish layer artefact [ app-process-queue-two ]
       run: |
          echo " ########## Start generate layer packges ##########"
          mkdir -p layer/python/lib/python3.10/site-packages
          pip3 install -r requirements.txt -t layer/python/lib/python3.10/site-packages/
          cd layer
          ls -R
          echo " ########## Start Zip layer ##########"
          zip -r ${{env.service-name-app-process-two}}-layer.zip *
          aws s3 cp ./${{env.service-name-app-process-two}}-layer.zip s3://s3-artefact-bucket
          echo " ########## End Zip layer ##########"
          cd ..
          rm -r layer
          echo " ########## End generate layer packges ##########"
       working-directory: ${{env.working-directory-app-process-two-build}}  
     - name: Create release to app lambda [app-process-queue-one ]
       run: |
          echo " ########## Start generate lambda app ##########"
          ls -R
          zip -r ${{env.service-name-app-process-one}}.zip *
          ls -R
          aws s3 cp ./${{env.service-name-app-process-one}}.zip s3://s3-artefact-bucket         
          echo " ########## End generate lambda app ##########"
       working-directory: ${{env.working-directory-app-process-one-build}}  
     - name: Create release to app lambda [app-process-queue-two ]
       run: |
          echo " ########## Start generate lambda app ##########"
          ls -R
          zip -r ${{env.service-name-app-process-two}}.zip *
          ls -R
          aws s3 cp ./${{env.service-name-app-process-two}}.zip s3://s3-artefact-bucket         
          echo " ########## End generate lambda app ##########"
       working-directory: ${{env.working-directory-app-process-two-build}} 
     - name: Create release to app lambda [app-enabled-disabled-trigger ]
       run: |
          echo " ########## Start generate lambda app ##########"
          ls -R
          zip -r ${{env.service-name-app-enabled-disabled-trigger}}.zip *
          ls -R
          aws s3 cp ./${{env.service-name-app-enabled-disabled-trigger}}.zip s3://s3-artefact-bucket         
          echo " ########## End generate lambda app ##########"
       working-directory: ${{env.working-directory-app-enabled-disabled-trigger-build}}   
   
  deploy-app-process-queue-one:
    name: Deploy app process queue one      
    runs-on: ubuntu-latest
    needs: build
    steps:  
     - name: Checkout
       uses: actions/checkout@master 
     - name: root directory
       run: ls -R
       working-directory: ${{env.worker-directory-root}}         
     - name: Configure AWS credentials
       id: credentialsaws
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ secrets.AWS_REGION }}
     - name: AWS Deploy CloudFormation Stack
       run: |
           ls -R
           aws cloudformation deploy \
           --template-file Template.yml \
           --capabilities CAPABILITY_NAMED_IAM \
           --parameter-overrides  LambdaTransactionProcessorFunctionName=${{ env.service-name-app-process-one }} SQSQueueName=${{ env.service-name-app-process-one }}-queue EventBridgeScheduleByMinuteName=${{ env.service-name-app-process-one }}-scheduler \
           --stack-name ${{env.service-name-app-process-one}}   
       working-directory: ${{env.working-directory-app-process-one-publish}}  
  
  deploy-app-process-queue-two:
    name: Deploy app process queue two      
    runs-on: ubuntu-latest
    needs: build
    steps:  
     - name: Checkout
       uses: actions/checkout@master 
     - name: root directory
       run: ls -R
       working-directory: ${{env.worker-directory-root}}         
     - name: Configure AWS credentials
       id: credentialsaws
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ secrets.AWS_REGION }}
     - name: AWS Deploy CloudFormation Stack
       run: |
           ls -R
           aws cloudformation deploy \
           --template-file Template.yml \
           --capabilities CAPABILITY_NAMED_IAM \
           --parameter-overrides  LambdaTransactionProcessorFunctionName=${{ env.service-name-app-process-two }} SQSQueueName=${{ env.service-name-app-process-two }}-queue EventBridgeScheduleByMinuteName=${{ env.service-name-app-process-two }}-scheduler \
           --stack-name ${{env.service-name-app-process-two}}   
       working-directory: ${{env.working-directory-app-process-two-publish}}  
  
  deploy-app-enabled-disabled-trigger:
    name: Deploy app enabled disabled trigger     
    runs-on: ubuntu-latest
    needs: build
    steps:  
     - name: Checkout
       uses: actions/checkout@master 
     - name: root directory
       run: ls -R
       working-directory: ${{env.worker-directory-root}}         
     - name: Configure AWS credentials
       id: credentialsaws
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ secrets.AWS_REGION }}
     - name: AWS Deploy CloudFormation Stack
       run: |
           ls -R
           aws cloudformation deploy \
           --template-file Template.yml \
           --capabilities CAPABILITY_NAMED_IAM \
           --parameter-overrides  LambdaTransactionProcessorFunctionName=${{ env.service-name-app-enabled-disabled-trigger }} AccessKey=${{ secrets.AWS_ACCESS_KEY_ID }}  SecretKey=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
           --stack-name ${{env.service-name-app-enabled-disabled-trigger}}   
       working-directory: ${{env.working-directory-app-enabled-disabled-trigger-publish}}  
